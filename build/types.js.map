{"version":3,"sources":["types.tsx"],"names":[],"mappings":";;AAIA,IAAY,UAGX;AAHD,WAAY,UAAU;IAClB,yCAAO,CAAA;IACP,+CAAM,CAAA;AACV,CAAC,EAHW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAGrB","file":"types.js","sourcesContent":["import { HeaderRepository } from './header-repository';\r\nimport { IKeyboardControllerRemoveEvent, IKeyboardControllerPasteEvent, IKeyboardControllerConstructor } from './keyboard-controller';\r\nimport { IScrollViewInterface } from './scroll-view';\r\n\r\nexport enum HeaderType {\r\n    Row = 1,\r\n    Column\r\n}\r\n\r\nexport interface IHeader {\r\n    /** Unique header identifier for **all** headers in repository.\r\n     * Do not edit. Assigned by repository if not provided.\r\n     * Can be assigned once before used. */\r\n    $id?: number | string;\r\n    /** List of children headers. */\r\n    $children?: IHeader[];\r\n    /** Size of current header. */\r\n    $size?: number;\r\n    /** Size of current header when collapsed. */\r\n    $sizeCollapsed?: number;\r\n    /** Filter flag. */\r\n    $collapsed?: boolean;\r\n    /** Marks this column or row read only. */\r\n    $readOnly?: boolean;\r\n    /** Deleting or pasting is allowed, but editor cannot be opened. */\r\n    $noEditor?: boolean;\r\n\r\n    /** Any other custom properties. */\r\n    [prop: string]: any;\r\n}\r\n\r\nexport type HeaderResizeBehavior = 'auto' | 'manual' | 'reset';\r\nexport type HeaderFilter = (props: { header: IHeader, type: HeaderType }) => boolean;\r\nexport type HeaderClampFunction = (props: { header: IHeader, type: HeaderType, size: number }) => number;\r\n\r\nexport interface IGridSelection {\r\n    row: number;\r\n    column: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport interface IGridAddress {\r\n    row: number;\r\n    column: number;\r\n}\r\n\r\nexport interface IGridView {\r\n    firstRow: number;\r\n    lastRow: number;\r\n    firstColumn: number;\r\n    lastColumn: number;\r\n    rowsHeight: number;\r\n    columnsWidth: number;\r\n}\r\n\r\nexport interface IGridOverscan {\r\n    firstRow: number;\r\n    lastRow: number;\r\n    firstColumn: number;\r\n    lastColumn: number;\r\n}\r\n\r\nexport interface ICellRenderBaseEvent {\r\n    row: number;\r\n    column: number;\r\n    rowHeader: IHeader;\r\n    columnHeader: IHeader;\r\n}\r\n\r\nexport interface ICellRendererEvent extends ICellRenderBaseEvent {\r\n    active: boolean;\r\n    style: React.CSSProperties;\r\n    theme: IGridTheme;\r\n    data: any;\r\n}\r\n\r\nexport interface IHeaderMeasure {\r\n    index: number;\r\n    type: HeaderType;\r\n    level: number;\r\n    header: IHeader;\r\n}\r\n\r\nexport interface ICellMeasureResult {\r\n    row: number;\r\n    column: number;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport interface IHeaderMeasureResult {\r\n    header: IHeader;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport interface IMeasureResult {\r\n    cells?: ICellMeasureResult[];\r\n    headers?: IHeaderMeasureResult[];\r\n}\r\n\r\nexport interface ICellsMeasureEvent {\r\n    cells: ICellRenderBaseEvent[];\r\n    headers: IHeaderMeasure[];\r\n    data: any;\r\n    callback: (result: IMeasureResult) => void;\r\n}\r\n\r\nexport interface ICellEditorEvent extends ICellRendererEvent {\r\n    /** Request to close editor. */\r\n    close: (commit: boolean) => void;\r\n    /** Set update for this cell. */\r\n    update: (nextValue: any) => void;\r\n    theme: IGridTheme;\r\n}\r\n\r\nexport interface IResizerRenderEvent {\r\n    type: 'level' | 'header';\r\n    orientation: 'horizontal' | 'vertical';\r\n    resizer: 'initial' | 'changed';\r\n    style: React.CSSProperties;\r\n    theme: IGridTheme;\r\n}\r\n\r\nexport interface IHeaderRendererEvent {\r\n    type: HeaderType;\r\n    selection: boolean;\r\n    style: React.CSSProperties;\r\n    header: IHeader;\r\n    parent: boolean;\r\n    viewIndex: number;\r\n    parentHeader: IHeader;\r\n    theme: IGridTheme;\r\n}\r\n\r\nexport interface ISelectionRendererEvent {\r\n    key: number;\r\n    style: React.CSSProperties;\r\n    active: boolean;\r\n    edit: boolean;\r\n    theme: IGridTheme;\r\n}\r\n\r\nexport interface IGridSpaceEvent {\r\n    cells: IGridAddress[];\r\n}\r\n\r\nexport interface IGridCellRightClickEvent {\r\n    cell: IGridAddress;\r\n    event: React.MouseEvent<HTMLElement>;\r\n    /** Select current cell. */\r\n    select: () => void;\r\n    /** Right click was inside any selection. */\r\n    inside: boolean;\r\n}\r\n\r\nexport interface IGridHeaderRightClickEvent {\r\n    header: IHeader;\r\n    event: React.MouseEvent<HTMLElement>;\r\n}\r\n\r\nexport interface IGridRemoveEvent extends IKeyboardControllerRemoveEvent { }\r\n\r\nexport interface IGridNullifyEvent extends IGridSpaceEvent { }\r\n\r\nexport interface IGridCopyEvent {\r\n    cells: IGridAddress[];\r\n    data: any;\r\n    repository: HeaderRepository;\r\n    withHeaders: boolean;\r\n    focus: () => void;\r\n}\r\n\r\nexport interface IGridResizeHeader {\r\n    type: HeaderType;\r\n    header: IHeader;\r\n    size: number;\r\n}\r\n\r\nexport interface IGridResizeHeaderLevel {\r\n    type: HeaderType;\r\n    level: number;\r\n    size: number;\r\n}\r\n\r\nexport interface IGridResizeCombinedEvent {\r\n    levels?: IGridResizeHeaderLevel[];\r\n    headers?: IGridResizeHeader[];\r\n    behavior: HeaderResizeBehavior;\r\n}\r\n\r\nexport interface IGridPasteEvent extends IKeyboardControllerPasteEvent {\r\n    repository: HeaderRepository;\r\n    data: any;\r\n    target: IGridAddress;\r\n}\r\n\r\nexport interface IGridUpdateEvent {\r\n    cell: IGridAddress;\r\n    value: any;\r\n}\r\n\r\nexport interface IGridSelectionEvent {\r\n    active?: {\r\n        previous: IGridAddress;\r\n        current: IGridAddress;\r\n    };\r\n    selection?: {\r\n        previous: IGridSelection[];\r\n        current: IGridSelection[];\r\n    };\r\n}\r\n\r\nexport type TGridReadOnlyEventSource = 'editor' | 'paste' | 'nullify';\r\n\r\nexport interface IGridReadOnlyEvent {\r\n    column: IHeader;\r\n    row: IHeader;\r\n    source: TGridReadOnlyEventSource;\r\n}\r\n\r\nexport interface IGridTheme {\r\n    classNameGrid?: string;\r\n    classNameGridCorner?: string;\r\n    classNameGridRows?: string;\r\n    classNameGridColumns?: string;\r\n    classNameScrollView?: string;\r\n\r\n    styleGrid?: React.CSSProperties;\r\n    styleGridCorner?: React.CSSProperties;\r\n    styleGridRows?: React.CSSProperties;\r\n    styleGridColumns?: React.CSSProperties;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface IGridProps {\r\n    tabIndex?: number;\r\n\r\n    /** Always show scrollbars. Otherwise it will be automatically hidden. */\r\n    preserveScrollbars?: boolean;\r\n\r\n    /** Reference to headers repository. */\r\n    repository: HeaderRepository;\r\n\r\n    /** Not used directly by Component, but provided to the cell renderer. */\r\n    data?: any;\r\n\r\n    /** Prevent editors to appear. `onNullify`, `onRemove`, `onSpace` and `onPaste` events will not be invoked. */\r\n    readOnly?: boolean;\r\n\r\n    overscanRows?: number;\r\n    overscanColumns?: number;\r\n\r\n    theme?: IGridTheme;\r\n\r\n    active?: IGridAddress;\r\n\r\n    selection?: IGridSelection[];\r\n\r\n    /** Cell renderer. Required. Some event handlers will be bound. */\r\n    onRenderCell: (e: ICellRendererEvent) => JSX.Element;\r\n\r\n    /** Header renderer. Required. */\r\n    onRenderHeader: (e: IHeaderRendererEvent) => JSX.Element;\r\n\r\n    onRenderHeaderCorner?: () => JSX.Element;\r\n\r\n    /** Selection renderer. Required. If active property is true - this renders active cell selection. */\r\n    onRenderSelection?: (e: ISelectionRendererEvent) => JSX.Element;\r\n\r\n    /** Editor renderer. Optional. */\r\n    onRenderEditor?: (e: ICellEditorEvent) => JSX.Element;\r\n\r\n    /** Resizer renderer. Optional. */\r\n    onRenderResizer?: (e: IResizerRenderEvent) => JSX.Element;\r\n\r\n    onAutoMeasure?: (e: ICellsMeasureEvent) => void;\r\n\r\n    /** Invoked with all selected cells when `SPACE` key is pressed. Usefull for checkbox cells. */\r\n    onSpace?: (e: IGridSpaceEvent) => void;\r\n\r\n    /** Invoked with all selected rows and columns when `CMD`/`CTRL`+`DELETE`/`BACKSPACE` keys are pressed. Remove records here. */\r\n    onRemove?: (e: IGridRemoveEvent) => void;\r\n\r\n    /** Invoked with all selected cells when `DELETE`/`BACKSPACE` keys are pressed. Replace data with nulls here. */\r\n    onNullify?: (e: IGridNullifyEvent) => void;\r\n\r\n    /** Invoked on `COPY` event, provides selected cells and flag `withHeaders` when ALT key is pressed. */\r\n    onCopy?: (e: IGridCopyEvent) => void;\r\n\r\n    /** Invoked on `PASTE` event, provides target cell and clipboard `DataTransfer` object. */\r\n    onPaste?: (e: IGridPasteEvent) => void;\r\n\r\n    /** Invoked on cell right click. */\r\n    onRightClick?: (e: IGridCellRightClickEvent) => void;\r\n\r\n    /** Invoked on cell right click. */\r\n    onHeaderRightClick?: (e: IGridHeaderRightClickEvent) => void;\r\n\r\n    /** Invoked on editor close when value was changed. */\r\n    onUpdate?: (e: IGridUpdateEvent) => void;\r\n\r\n    /** Invoked when active cell or selection changed. */\r\n    onSelection?: (e: IGridSelectionEvent) => void;\r\n\r\n    /** Called when header set was resized. */\r\n    onHeaderResize?: (e: IGridResizeCombinedEvent) => void;\r\n\r\n    /** Checks if current cell is readonly. Pasting and editing of that cell will be forbidden. */\r\n    onReadOnly?: (e: IGridReadOnlyEvent) => boolean;\r\n\r\n    /** Hidded property, sometime I will document it. (ಠ_ಠ) Not supposed to be used for now. */\r\n    scrollViewClass?: IScrollViewInterface;\r\n\r\n    /** Optional override for {@link KeyboardController} class */\r\n    keyboardControllerConstructor?: IKeyboardControllerConstructor\r\n}\r\n"]}