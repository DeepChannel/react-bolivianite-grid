{"version":3,"sources":["clipboard-controller.ts"],"names":[],"mappings":"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","file":"clipboard-controller.js","sourcesContent":["import { IGridAddress, IGridCopyEvent, IGridPasteEvent, IHeader, HeaderType } from './types';\r\nimport { HeaderRepository } from './header-repository';\r\n\r\nexport interface ICopyPasteRenderCellEvent {\r\n    cell: IGridAddress;\r\n    data: any;\r\n    repository: HeaderRepository;\r\n}\r\n\r\nexport interface ICopyPasteRenderHeaderEvent {\r\n    header: IHeader;\r\n    type: HeaderType;\r\n}\r\n\r\nexport interface ICopyPasteResultEvent {\r\n    table: any[][];\r\n    focus: () => void;\r\n}\r\n\r\nexport interface ICopyPasteParseEvent extends IGridAddress {\r\n    value: string;\r\n}\r\n\r\nexport interface ICopyPasteUpdateEvent {\r\n    changes: (IGridAddress & { value: any })[];\r\n}\r\n\r\nexport interface ICopyPasteControllerProps {\r\n    onInvalidSelection?: () => void;\r\n    renderCell: (e: ICopyPasteRenderCellEvent) => string;\r\n    renderHeader: (e: ICopyPasteRenderHeaderEvent) => string;\r\n    clipboardParser: (data: DataTransfer) => string[][];\r\n    cellParser: (e: ICopyPasteParseEvent) => any;\r\n    onCopy: (e: ICopyPasteResultEvent) => void;\r\n    onPaste: (e: ICopyPasteUpdateEvent) => void;\r\n}\r\n\r\nexport class ClipboardController {\r\n    constructor(public props: ICopyPasteControllerProps) { }\r\n\r\n    private _getValidatedTable(cells: IGridAddress[]) {\r\n        let table: IGridAddress[][] = [];\r\n\r\n        cells.forEach((cell) => {\r\n            if (!table[cell.row]) {\r\n                table[cell.row] = [];\r\n            }\r\n\r\n            table[cell.row][cell.column] = cell;\r\n        });\r\n\r\n        let first: IGridAddress[] = null;\r\n        let firstLen = -1;\r\n\r\n        let validated = table.every((r) => {\r\n            if (!first) {\r\n                firstLen = (first = r).filter(v => !!v).length;\r\n                return true;\r\n            }\r\n\r\n            return firstLen === r.filter(v => !!v).length && first.every((c, j) => r[j] && r[j].column === c.column);\r\n        });\r\n\r\n        if (!validated) {\r\n            return null;\r\n        }\r\n\r\n        return table.filter(v => !!v).map(r => r.filter(c => !!c));\r\n    }\r\n\r\n    private _renderHeader(header: IHeader, type: HeaderType, lock: Set<string | number>) {\r\n        if (lock.has(header.$id)) {\r\n            return '';\r\n        }\r\n\r\n        lock.add(header.$id);\r\n        return this.props.renderHeader({ header, type });\r\n    }\r\n\r\n    private _transpose(table: any[][]) {\r\n        let out: any[][] = [];\r\n\r\n        for (let r = 0, rLen = table.length; r < rLen; r++) {\r\n            for (let c = 0, cLen = table[r].length; c < cLen; c++) {\r\n                (out[c] = out[c] || [])[r] = table[r][c];\r\n            }\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    public onCopy = ({ cells, repository, data, withHeaders, focus }: IGridCopyEvent) => {\r\n        let table = this._getValidatedTable(cells);\r\n\r\n        if (!table) {\r\n            if (this.props.onInvalidSelection) {\r\n                this.props.onInvalidSelection();\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        let out = table.map(r => r.map(c => this.props.renderCell({ data, repository, cell: c })));\r\n\r\n        if (withHeaders && (repository.offsetWidth || repository.offsetHeight)) {\r\n            let lock = new Set<string | number>();\r\n            let top: string[][] = [];\r\n            let left: string[][] = [];\r\n            let columnLine = table[0];\r\n            let rowLine = table.map(r => r[0]);\r\n            let columnLen = columnLine.length;\r\n            let rowLen = rowLine.length;\r\n\r\n            // render column headers\r\n            if (repository.offsetHeight) {\r\n                columnLine.forEach(({ column }, c) => {\r\n                    let h = repository.columns[column];\r\n                    let level = repository.getLevel(h);\r\n\r\n                    do {\r\n                        top[level] = top[level] || new Array(columnLen).fill('');\r\n                        top[level][c] = this._renderHeader(h, repository.getHeaderType(h), lock);\r\n                    } while (level-- , h = repository.getParent(h));\r\n                });\r\n            }\r\n\r\n            // render row headers\r\n            if (repository.offsetWidth) {\r\n                rowLine.forEach(({ row }, r) => {\r\n                    let h = repository.rows[row];\r\n                    let level = repository.getLevel(h);\r\n\r\n                    do {\r\n                        left[level] = left[level] || new Array(rowLen).fill('');\r\n                        left[level][r] = this._renderHeader(h, repository.getHeaderType(h), lock);\r\n                    } while (level-- , h = repository.getParent(h));\r\n                });\r\n            }\r\n\r\n            // insert padding for top headers\r\n            let paddingLeft = left.length;\r\n            left = this._transpose(left);\r\n            top = top.map((line) => [...(new Array(paddingLeft).fill('')), ...line]);\r\n\r\n            // insert left headers\r\n            out = out.map((line, r) => [...(left[r] || []), ...(line || [])]);\r\n\r\n            out = [...top, ...out];\r\n        }\r\n\r\n        this.props.onCopy({ table: out, focus });\r\n    }\r\n\r\n    public onPaste = ({ clipboard, target, isReadOnly }: IGridPasteEvent) => {\r\n        let table = this.props.clipboardParser(clipboard);\r\n\r\n        if (!Array.isArray(table) || !table.length || !Array.isArray(table[0]) || !table[0].length) {\r\n            return;\r\n        }\r\n\r\n        let changes: (IGridAddress & { value: any })[] = [];\r\n\r\n        for (let r = 0, rLen = table.length; r < rLen; r++) {\r\n            for (let c = 0, cLen = table[r].length; c < cLen; c++) {\r\n                let column = target.column + c;\r\n                let row = target.row + r;\r\n\r\n                if (isReadOnly({ row, column })) {\r\n                    continue;\r\n                }\r\n\r\n                changes.push({\r\n                    column,\r\n                    row,\r\n                    value: this.props.cellParser({\r\n                        column,\r\n                        row,\r\n                        value: table[r][c]\r\n                    })\r\n                });\r\n            }\r\n        }\r\n\r\n        if (changes.length) {\r\n            this.props.onPaste({ changes });\r\n        }\r\n    }\r\n}\r\n"]}