{"version":3,"sources":["header-repository-cache.ts"],"names":[],"mappings":";;AA6BA;IAAA;QACc,WAAM,GAAG;YACf,GAAG,EAAE,EAA6B;YAClC,IAAI,EAAE,EAA6B;SACtC,CAAC;QAEQ,YAAO,GAAG;YAChB,IAAI,EAAE,CAAC;YACP,GAAG,EAAE,CAAC;SACT,CAAC;QAEQ,YAAO,GAAG;YAChB,IAAI,EAAE,CAAC;YACP,GAAG,EAAE,CAAC;SACT,CAAC;QAEQ,eAAU,GAAG,IAAI,GAAG,EAAU,CAAC;IAkD7C,CAAC;IAhDU,6CAAa,GAApB,UAAqB,OAAgB,EAAE,KAAiB;QACpD,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;IACzE,CAAC;IAEM,6CAAa,GAApB,UAAqB,KAAa,EAAE,OAAgB,EAAE,KAAiB;QACnE,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;IACzE,CAAC;IAEM,6CAAa,GAApB,UAAqB,OAAgB,EAAE,KAAiB;QACpD,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;IAC/E,CAAC;IAEM,6CAAa,GAApB,UAAqB,OAAgB,EAAE,OAAgB,EAAE,KAAiB;QACtE,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;IAC/E,CAAC;IAEM,4CAAY,GAAnB,UAAoB,KAAa,EAAE,IAAoB;QACnD,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAEM,4CAAY,GAAnB,UAAoB,IAAY,EAAE,KAAa,EAAE,IAAoB;QACjE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;IACpC,CAAC;IAEM,yCAAS,GAAhB,UAAiB,IAAoB;QACjC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAEM,yCAAS,GAAhB,UAAiB,MAAc,EAAE,IAAoB;QACjD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;IAChC,CAAC;IAEM,yCAAS,GAAhB,UAAiB,IAAoB;QACjC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAEM,yCAAS,GAAhB,UAAiB,IAAY,EAAE,IAAoB;QAC/C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;IAC9B,CAAC;IAEM,4CAAY,GAAnB,UAAoB,KAAa,EAAE,IAAgB;QAC/C,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAI,IAAI,SAAI,KAAO,CAAC,CAAC;IACnD,CAAC;IAEM,4CAAY,GAAnB,UAAoB,MAAe,EAAE,KAAa,EAAE,IAAgB;QAChE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAI,IAAI,SAAI,KAAO,CAAC,CAAC;IACnE,CAAC;IAEL,4BAAC;AAAD,CAlEA,AAkEC,IAAA;AAlEY,sDAAqB","file":"header-repository-cache.js","sourcesContent":["import { IHeader, HeaderType } from './types';\r\n\r\nexport interface IHeaderRepositoryCache {\r\n    /** Set size to header. Note if header in $collapsed = true state. */\r\n    getHeaderSize(header: IHeader, type: HeaderType): number;\r\n    /** Get size assigned to header. Note if header in $collapsed = true state. */\r\n    setHeaderSize(size: number, header: IHeader, type: HeaderType): void;\r\n    /** Set header level size. */\r\n    getLevelSize(level: number, type: 'top' | 'left'): number;\r\n    /** Get header level size. */\r\n    setLevelSize(size: number, level: number, type: 'top' | 'left'): void;\r\n    /** Set total number of levels. */\r\n    getLevels(type: 'top' | 'left'): number;\r\n    /** Get total number of levels. */\r\n    setLevels(levels: number, type: 'top' | 'left'): void;\r\n    /** Set total size of all levels. */\r\n    getOffset(type: 'top' | 'left'): number;\r\n    /** Get total size of all levels. */\r\n    setOffset(size: number, type: 'top' | 'left'): void;\r\n    /** Get header autosize lock. If true - header will not be automatically expanded by cells content. */\r\n    getHeaderLock(header: IHeader, type: HeaderType): boolean;\r\n    /** Get header autosize lock. If true - header will not be automatically expanded by cells content. */\r\n    setHeaderLock(locked: boolean, header: IHeader, type: HeaderType): void;\r\n    /** Get level autosize lock. If true - level will not be automatically expanded by headers content. */\r\n    getLevelLock(level: number, type: HeaderType): boolean;\r\n    /** Set level autosize lock. If true - level will not be automatically expanded by headers content. */\r\n    setLevelLock(locked: boolean, level: number, type: HeaderType): void;\r\n}\r\n\r\nexport class HeaderRepositoryCache implements IHeaderRepositoryCache {\r\n    protected _level = {\r\n        top: {} as { [i: string]: number },\r\n        left: {} as { [i: string]: number }\r\n    };\r\n\r\n    protected _levels = {\r\n        left: 0,\r\n        top: 0\r\n    };\r\n\r\n    protected _offset = {\r\n        left: 0,\r\n        top: 0\r\n    };\r\n\r\n    protected _levelLock = new Set<string>();\r\n\r\n    public getHeaderSize(_header: IHeader, _type: HeaderType): number {\r\n        throw new Error('HeaderRepositoryCache.getSize is not implemented.');\r\n    }\r\n\r\n    public setHeaderSize(_size: number, _header: IHeader, _type: HeaderType): void {\r\n        throw new Error('HeaderRepositoryCache.setSize is not implemented.');\r\n    }\r\n\r\n    public getHeaderLock(_header: IHeader, _type: HeaderType): boolean {\r\n        throw new Error('HeaderRepositoryCache.getHeaderLock is not implemented.');\r\n    }\r\n\r\n    public setHeaderLock(_locked: boolean, _header: IHeader, _type: HeaderType): void {\r\n        throw new Error('HeaderRepositoryCache.setHeaderLock is not implemented.');\r\n    }\r\n\r\n    public getLevelSize(level: number, type: 'top' | 'left'): number {\r\n        return this._level[type][level] || 0;\r\n    }\r\n\r\n    public setLevelSize(size: number, level: number, type: 'top' | 'left'): void {\r\n        this._level[type][level] = size;\r\n    }\r\n\r\n    public getLevels(type: 'top' | 'left'): number {\r\n        return this._levels[type] || 0;\r\n    }\r\n\r\n    public setLevels(levels: number, type: 'top' | 'left'): void {\r\n        this._levels[type] = levels;\r\n    }\r\n\r\n    public getOffset(type: 'top' | 'left'): number {\r\n        return this._offset[type] || 0;\r\n    }\r\n\r\n    public setOffset(size: number, type: 'top' | 'left'): void {\r\n        this._offset[type] = size;\r\n    }\r\n\r\n    public getLevelLock(level: number, type: HeaderType): boolean {\r\n        return this._levelLock.has(`${type}:${level}`);\r\n    }\r\n\r\n    public setLevelLock(locked: boolean, level: number, type: HeaderType): void {\r\n        this._levelLock[locked ? 'add' : 'delete'](`${type}:${level}`);\r\n    }\r\n\r\n}\r\n"]}