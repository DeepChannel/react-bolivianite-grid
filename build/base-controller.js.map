{"version":3,"sources":["base-controller.ts"],"names":[],"mappings":"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","file":"base-controller.js","sourcesContent":["import { KeyboardEvent, MouseEvent } from 'react';\r\nimport { IGridAddress, IGridSelection, IGridView } from './types';\r\n\r\nconst IS_MACOS = navigator.platform.slice(0, 3) === 'Mac';\r\n\r\nexport interface IState {\r\n    enabled: boolean;\r\n    focused: boolean;\r\n    editor: IGridAddress;\r\n    active: IGridAddress;\r\n    selection: IGridSelection[];\r\n    view: IGridView;\r\n    rows: number;\r\n    columns: number;\r\n    readOnly: boolean;\r\n}\r\n\r\nexport interface IUpdateSelectionEvent {\r\n    active?: IGridAddress;\r\n    selection?: IGridSelection[];\r\n}\r\n\r\nexport interface IControllerProps {\r\n    getState: () => IState;\r\n    onScroll: (cell: IGridAddress) => void;\r\n    onUpdateSelection: (next: IUpdateSelectionEvent, callback?: () => void) => void;\r\n    onCloseEditor: (commit: boolean, onClosed?: () => void) => void;\r\n    onOpenEditor: (next: IGridAddress) => void;\r\n}\r\n\r\nexport class Controller {\r\n    protected _state: IState = null;\r\n\r\n    constructor(protected _props: IControllerProps) { }\r\n\r\n    protected _getModifiers(e: KeyboardEvent<HTMLElement> | MouseEvent<HTMLElement>) {\r\n        const { ctrlKey, altKey, shiftKey } = e;\r\n        const cmdKey = e.getModifierState('Meta'); // Command key for Mac OS\r\n\r\n        return {\r\n            ctrlKey,\r\n            macCmdKey: cmdKey,\r\n            cmdKey: IS_MACOS ? cmdKey : ctrlKey,\r\n            shiftKey,\r\n            altKey\r\n        };\r\n    }\r\n\r\n    protected _clampAddress({ column, row }: IGridAddress) {\r\n        const { rows, columns } = this._state;\r\n        return {\r\n            column: Math.min(Math.max(0, column), columns - 1),\r\n            row: Math.min(Math.max(0, row), rows - 1)\r\n        } as IGridAddress;\r\n    }\r\n\r\n    protected _splitSelection(selection: IGridSelection[]) {\r\n        let prev = selection.slice();\r\n        let last = prev.pop();\r\n\r\n        return {\r\n            prev, last\r\n        };\r\n    }\r\n\r\n    protected _getSelectedCells(selection: IGridSelection[]) {\r\n        let lock = new Set<string>();\r\n        let list: IGridAddress[] = [];\r\n\r\n        for (const { column, row, height, width } of selection) {\r\n            for (let r = row, rLast = row + height; r <= rLast; r++) {\r\n                for (let c = column, cLast = column + width; c <= cLast; c++) {\r\n                    let key = `${r}x${c}`;\r\n\r\n                    if (lock.has(key)) {\r\n                        continue;\r\n                    }\r\n\r\n                    lock.add(key);\r\n                    list.push({ row: r, column: c });\r\n                }\r\n            }\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    protected _isInsideSelection({ column: c, row: r }: IGridAddress, selection: IGridSelection[]) {\r\n        return selection.findIndex(({ row, column, height, width }) => {\r\n            return row <= r && r <= (row + height) && column <= c && c <= (column + width);\r\n        }) !== -1;\r\n    }\r\n\r\n    protected _request() {\r\n        return this._state = this._props.getState();\r\n    }\r\n}\r\n"]}