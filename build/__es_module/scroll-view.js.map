{"version":3,"sources":["scroll-view.tsx"],"names":[],"mappings":"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","file":"scroll-view.js","sourcesContent":["import * as React from 'react';\r\n\r\nexport interface IScrollViewUpdateEvent {\r\n    scrollLeft: number;\r\n    scrollTop: number;\r\n    scrollWidth: number;\r\n    scrollHeight: number;\r\n    clientWidth: number;\r\n    clientHeight: number;\r\n}\r\n\r\nexport interface IScrollViewProps {\r\n    className?: string;\r\n    style?: React.CSSProperties;\r\n    preserveScrollbars?: boolean;\r\n    onScroll: (event: IScrollViewUpdateEvent) => void;\r\n    bodyRenderer: (event: IScrollViewUpdateEvent) => React.ReactNode;\r\n    headersRenderer: (event: IScrollViewUpdateEvent) => React.ReactNode;\r\n}\r\n\r\nexport interface IScrollViewComponentInterface extends React.Component<IScrollViewProps, any> {\r\n    scrollerStyle: CSSStyleDeclaration;\r\n    scrollLeft: number;\r\n    scrollTop: number;\r\n}\r\n\r\nexport interface IScrollViewInterface extends React.StaticLifecycle<IScrollViewProps, any> {\r\n    new (props: IScrollViewProps, context?: any): IScrollViewComponentInterface;\r\n    propTypes?: React.ValidationMap<IScrollViewProps>;\r\n    contextTypes?: React.ValidationMap<any>;\r\n    childContextTypes?: React.ValidationMap<any>;\r\n    defaultProps?: Partial<IScrollViewProps>;\r\n    displayName?: string;\r\n}\r\n\r\nexport class ScrollView extends React.Component<IScrollViewProps, any> implements IScrollViewComponentInterface {\r\n    private _r: HTMLDivElement;\r\n    private _taskResize: any = null;\r\n\r\n    constructor(p: IScrollViewProps, c: any) {\r\n        super(p, c);\r\n    }\r\n\r\n    public get scrollerStyle() {\r\n        return this._r.style;\r\n    }\r\n\r\n    public get scrollLeft() {\r\n        return this._r.scrollLeft;\r\n    }\r\n\r\n    public set scrollLeft(v) {\r\n        this._r.scrollLeft = v;\r\n    }\r\n\r\n    public get scrollTop() {\r\n        return this._r.scrollTop;\r\n    }\r\n\r\n    public set scrollTop(v) {\r\n        this._r.scrollTop = v;\r\n    }\r\n\r\n    private _onRef = (r: HTMLDivElement) => {\r\n        this._r = r;\r\n    }\r\n\r\n    private _onScroll = (e: React.UIEvent<HTMLDivElement>) => {\r\n        if (!this.props.onScroll || e && this._r !== e.target) {\r\n            return;\r\n        }\r\n\r\n        // Calling forceUpdate to prevent browser freeze.\r\n        this.forceUpdate(() => {\r\n            if (this.props.onScroll) {\r\n                this.props.onScroll(this._getView());\r\n            }\r\n        });\r\n    }\r\n\r\n    private _getView(): IScrollViewUpdateEvent {\r\n        if (!this._r) {\r\n            return {\r\n                scrollLeft: 0,\r\n                scrollTop: 0,\r\n                scrollWidth: 0,\r\n                scrollHeight: 0,\r\n                clientWidth: 0,\r\n                clientHeight: 0\r\n            };\r\n        }\r\n\r\n        return {\r\n            scrollLeft: this._r.scrollLeft,\r\n            scrollTop: this._r.scrollTop,\r\n            scrollWidth: this._r.scrollWidth,\r\n            scrollHeight: this._r.scrollHeight,\r\n            clientWidth: this._r.clientWidth,\r\n            clientHeight: this._r.clientHeight\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        let w = this._r.clientWidth;\r\n        let h = this._r.clientHeight;\r\n\r\n        this._taskResize = setInterval(() => {\r\n            let nw = this._r.clientWidth;\r\n            let nh = this._r.clientHeight;\r\n\r\n            if (nw !== w || nh !== h) {\r\n                w = nw;\r\n                h = nh;\r\n                this._onScroll(null);\r\n            }\r\n        }, 100);\r\n\r\n        if (this.props.onScroll) {\r\n            this.props.onScroll(this._getView());\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        clearInterval(this._taskResize);\r\n    }\r\n\r\n    public render() {\r\n        const view = this._getView();\r\n\r\n        return (\r\n            <div\r\n                style={{\r\n                    height: '100%',\r\n                    width: '100%',\r\n                    boxSizing: 'border-box',\r\n                    position: 'relative',\r\n                    overflow: 'hidden'\r\n                }}\r\n            >\r\n                <div\r\n                    className={this.props.className}\r\n                    ref={this._onRef}\r\n                    onScroll={this._onScroll}\r\n                    style={{\r\n                        ...this.props.style,\r\n                        position: 'absolute',\r\n                        left: 0,\r\n                        top: 0,\r\n                        right: 0,\r\n                        bottom: 0,\r\n                        overflow: this.props.preserveScrollbars ? 'scroll' : 'auto'\r\n                    }}\r\n                >\r\n                    {this.props.bodyRenderer(view)}\r\n                </div>\r\n                {this.props.headersRenderer(view)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScrollView;\r\n"]}