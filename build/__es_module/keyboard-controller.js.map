{"version":3,"sources":["keyboard-controller.ts"],"names":[],"mappings":"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","file":"keyboard-controller.js","sourcesContent":["import { KeyboardEvent } from 'react';\nimport { IGridAddress, IGridSelection, TGridReadOnlyEventSource } from './types';\nimport { Controller, IControllerProps } from './base-controller';\n\nexport interface IKeyboardControllerRemoveEvent {\n    rows: number[];\n    columns: number[];\n}\n\nexport interface IKeyboardControllerPasteEvent {\n    clipboard: DataTransfer;\n    getAllSelectedCells: () => IGridAddress[];\n    getLastSelectedCells: () => IGridAddress[];\n    isReadOnly: (cell: IGridAddress) => boolean;\n}\n\nexport interface IKeyboardControllerProps extends IControllerProps {\n    onNullify: (cells: IGridAddress[]) => void;\n    onRemove: (props: IKeyboardControllerRemoveEvent) => void;\n    onSpace: (cells: IGridAddress[]) => void;\n    onCopy: (cells: IGridAddress[], withHeaders: boolean) => void;\n    onPaste: (event: IKeyboardControllerPasteEvent) => void;\n    onReadOnly: (cell: IGridAddress, source: TGridReadOnlyEventSource) => boolean;\n}\n\nexport interface IKeyboardController {\n    keydown: (e: KeyboardEvent<HTMLDivElement>) => void;\n    dispose: () => void;\n}\n\nexport interface IKeyboardControllerConstructor {\n    new (props: IKeyboardControllerProps): IKeyboardController;\n}\n\nexport class KeyboardController extends Controller implements IKeyboardController {\n    constructor(protected _props: IKeyboardControllerProps) {\n        super(_props);\n\n        document.body.addEventListener('paste', this._paste);\n    }\n\n    protected _isInput(e: KeyboardEvent<HTMLDivElement>) {\n        const { keyCode } = e;\n        const { ctrlKey, altKey, macCmdKey } = this._getModifiers(e);\n\n        if (ctrlKey || altKey || macCmdKey) {\n            return false;\n        }\n\n        return (\n            (48 <= keyCode && keyCode <= 57) ||\n            (65 <= keyCode && keyCode <= 90) ||\n            (96 <= keyCode && keyCode <= 111) ||\n            (186 <= keyCode && keyCode <= 222)\n        );\n    }\n\n    protected _moveSelection(shiftKey: boolean, cmdKey: boolean, direction: 'left' | 'up' | 'right' | 'down', distance: number) {\n        const { active, rows, columns, selection } = this._state;\n\n        let nextScroll: IGridAddress = null;\n        let nextActive: IGridAddress = null;\n        let nextSelection: IGridSelection[] = null;\n\n        if (shiftKey && cmdKey) {\n            let { prev, last } = this._splitSelection(selection);\n            let next: IGridSelection = null;\n\n            switch (direction) {\n                case 'left':\n                    next = {\n                        ...last,\n                        column: 0,\n                        width: active.column\n                    };\n                    nextScroll = {\n                        row: null,\n                        column: 0\n                    };\n                    break;\n\n                case 'up':\n                    next = {\n                        ...last,\n                        row: 0,\n                        height: active.row\n                    };\n                    nextScroll = {\n                        row: 0,\n                        column: null\n                    };\n                    break;\n\n                case 'right':\n                    next = {\n                        ...last,\n                        column: active.column,\n                        width: columns - active.column - 1\n                    };\n                    nextScroll = {\n                        row: null,\n                        column: columns - 1\n                    };\n                    break;\n\n                case 'down':\n                    next = {\n                        ...last,\n                        row: active.row,\n                        height: rows - active.row - 1\n                    };\n                    nextScroll = {\n                        row: rows - 1,\n                        column: null\n                    };\n                    break;\n            }\n\n            if (next) {\n                nextSelection = [\n                    ...prev,\n                    next\n                ];\n            }\n        } else if (cmdKey) {\n            switch (direction) {\n                case 'left':\n                    nextActive = this._clampAddress({ row: active.row, column: 0 });\n                    break;\n\n                case 'up':\n                    nextActive = this._clampAddress({ row: 0, column: active.column });\n                    break;\n\n                case 'right':\n                    nextActive = this._clampAddress({ row: active.row, column: columns - 1 });\n                    break;\n\n                case 'down':\n                    nextActive = this._clampAddress({ row: rows - 1, column: active.column });\n                    break;\n            }\n\n            nextScroll = nextActive;\n\n            nextSelection = [{\n                ...nextActive,\n                width: 0,\n                height: 0\n            }];\n        } else if (shiftKey) {\n            let { prev, last } = this._splitSelection(selection);\n            let next: IGridSelection = null;\n            let delta = distance;\n\n            switch (direction) {\n                case 'left':\n                    if (last.column + last.width === active.column) {\n                        if (last.column) {\n                            let newColumn = last.column - distance;\n\n                            if (newColumn < 0) {\n                                delta = distance + newColumn;\n                                newColumn = 0;\n                            }\n\n                            next = {\n                                ...last,\n                                column: newColumn,\n                                width: last.width + delta\n                            };\n\n                            nextScroll = {\n                                column: next.column,\n                                row: null\n                            };\n                        }\n                    } else if (last.width) {\n                        let newWidth = last.width - distance;\n\n                        if (newWidth < 0) {\n                            delta = distance + newWidth;\n                            newWidth = 0;\n                        }\n\n                        next = {\n                            ...last,\n                            column: last.column,\n                            width: newWidth\n                        };\n\n                        nextScroll = {\n                            column: next.column + last.width - delta,\n                            row: null\n                        };\n                    }\n                    break;\n\n                case 'up':\n                    if (last.row + last.height === active.row) {\n                        if (last.row) {\n                            let newRow = last.row - distance;\n\n                            if (newRow < 0) {\n                                delta = distance + newRow;\n                                newRow = 0;\n                            }\n\n                            next = {\n                                ...last,\n                                row: newRow,\n                                height: last.height + delta\n                            };\n\n                            nextScroll = {\n                                column: null,\n                                row: next.row\n                            };\n                        }\n                    } else if (last.height) {\n                        let newHeight = last.height - distance;\n\n                        if (newHeight < 0) {\n                            delta = distance + newHeight;\n                            newHeight = 0;\n                        }\n\n                        next = {\n                            ...last,\n                            row: last.row,\n                            height: newHeight\n                        };\n\n                        nextScroll = {\n                            column: null,\n                            row: next.row + last.height - delta\n                        };\n                    }\n                    break;\n\n                case 'right':\n                    if (last.column === active.column) {\n                        let lastPos = last.column + last.width;\n                        if (lastPos < columns - 1) {\n                            if (lastPos + distance > columns - 1) {\n                                delta = (\n                                    distance >= columns - 1 - lastPos\n                                        ? columns - 1 - last.column\n                                        : last.width + distance - columns - 1\n                                );\n                            }\n\n                            next = {\n                                ...last,\n                                width: last.width + delta\n                            };\n\n                            nextScroll = {\n                                column: next.column + next.width,\n                                row: null\n                            };\n                        }\n                    } else if (last.width) {\n                        if (last.column + delta > active.column) {\n                            delta = active.column - last.column;\n                        }\n\n                        next = {\n                            ...last,\n                            column: last.column + delta,\n                            width: last.width - delta\n                        };\n\n                        nextScroll = {\n                            column: next.column,\n                            row: null\n                        };\n                    }\n                    break;\n\n                case 'down':\n                    if (last.row === active.row) {\n                        let lastPos = last.row + last.height;\n\n                        if (lastPos < rows - 1) {\n                            if (lastPos + distance > rows - 1) {\n                                delta = (\n                                    distance >= rows - 1 - lastPos\n                                        ? rows - 1 - last.row\n                                        : lastPos + distance - rows - 1\n                                );\n                            }\n\n                            next = {\n                                ...last,\n                                height: last.height + delta\n                            };\n\n                            nextScroll = {\n                                column: null,\n                                row: next.row + next.height\n                            };\n                        }\n                    } else if (last.height) {\n                        if (last.row + delta > active.row) {\n                            delta = active.row - last.row;\n                        }\n\n                        next = {\n                            ...last,\n                            row: last.row + delta,\n                            height: last.height - delta\n                        };\n                        nextScroll = {\n                            column: null,\n                            row: next.row\n                        };\n                    }\n                    break;\n            }\n\n            if (next) {\n                nextSelection = [\n                    ...prev,\n                    next\n                ];\n            }\n        } else {\n            switch (direction) {\n                case 'left':\n                    nextActive = this._clampAddress({ row: active.row, column: active.column - distance });\n                    break;\n\n                case 'up':\n                    nextActive = this._clampAddress({ row: active.row - distance, column: active.column });\n                    break;\n\n                case 'right':\n                    nextActive = this._clampAddress({ row: active.row, column: active.column + distance });\n                    break;\n\n                case 'down':\n                    nextActive = this._clampAddress({ row: active.row + distance, column: active.column });\n                    break;\n            }\n\n            nextScroll = nextActive;\n\n            nextSelection = [{\n                ...nextActive,\n                width: 0,\n                height: 0\n            }];\n        }\n\n        if (nextActive || nextSelection) {\n            this._props.onUpdateSelection({\n                active: nextActive,\n                selection: nextSelection\n            });\n        }\n\n        if (nextScroll) {\n            this._props.onScroll(nextScroll);\n        }\n    }\n\n    protected _onTab(e: KeyboardEvent<HTMLDivElement>, callback?: () => void) {\n        e.preventDefault();\n\n        const { shiftKey, cmdKey } = this._getModifiers(e);\n        let { active, rows, columns, selection } = this._state;\n\n        if (cmdKey) {\n            return;\n        }\n\n        let { last } = this._splitSelection(selection);\n        let firstRow = 0;\n        let firstColumn = 0;\n        let lastRow = rows - 1;\n        let lastColumn = columns - 1;\n        let insideSelection = false;\n        active = { ...active };\n\n        if (last.height || last.width) {\n            insideSelection = true;\n            firstRow = last.row;\n            firstColumn = last.column;\n            lastRow = firstRow + last.height;\n            lastColumn = firstColumn + last.width;\n        }\n\n        if (shiftKey) {\n            active.column--;\n            if (active.column < firstColumn) {\n                active.column = lastColumn;\n                active.row--;\n            }\n\n            if (active.row < firstRow) {\n                active.row = lastRow;\n            }\n        } else {\n            active.column++;\n\n            if (active.column > lastColumn) {\n                active.column = firstColumn;\n                active.row++;\n            }\n\n            if (active.row > lastRow) {\n                active.row = firstRow;\n            }\n        }\n\n        this._props.onUpdateSelection({\n            active: active,\n            selection: (\n                insideSelection\n                    ? null\n                    : [{ ...active, height: 0, width: 0 }]\n            )\n        }, () => {\n            this._props.onScroll(active);\n\n            if (callback) {\n                callback();\n            }\n        });\n\n    }\n\n    protected _onEnter(e: KeyboardEvent<HTMLDivElement>, callback?: () => void) {\n        e.preventDefault();\n\n        const { shiftKey, cmdKey } = this._getModifiers(e);\n        let { active, rows, selection } = this._state;\n\n        if (cmdKey) {\n            this._props.onOpenEditor(active);\n            return;\n        }\n\n        let { last } = this._splitSelection(selection);\n        let firstRow = 0;\n        let firstColumn = active.column;\n        let lastRow = rows - 1;\n        let lastColumn = active.column;\n        let insideSelection = false;\n        active = { ...active };\n\n        if (last.height || last.width) {\n            insideSelection = true;\n            firstRow = last.row;\n            firstColumn = last.column;\n            lastRow = firstRow + last.height;\n            lastColumn = firstColumn + last.width;\n        }\n\n        if (shiftKey) {\n            active.row--;\n\n            if (insideSelection) {\n                if (active.row < firstRow) {\n                    active.row = lastRow;\n                    active.column--;\n                }\n\n                if (active.column < firstColumn) {\n                    active.column = lastColumn;\n                }\n            } else if (active.row < 0) {\n                active.row = 0;\n            }\n        } else {\n            active.row++;\n\n            if (insideSelection) {\n                if (active.row > lastRow) {\n                    active.row = firstRow;\n                    active.column++;\n                }\n\n                if (active.column > lastColumn) {\n                    active.column = firstColumn;\n                }\n            } else if (active.row > rows - 1) {\n                active.row = rows - 1;\n            }\n        }\n\n        this._props.onUpdateSelection({\n            active: active,\n            selection: (\n                insideSelection\n                    ? null\n                    : [{ ...active, height: 0, width: 0 }]\n            )\n        }, () => {\n            this._props.onScroll(active);\n\n            if (callback) {\n                callback();\n            }\n        });\n\n    }\n\n    protected _onSpace(e: KeyboardEvent<HTMLDivElement>) {\n        e.preventDefault();\n\n        if (this._state.readOnly) {\n            return;\n        }\n\n        const cells = this._getSelectedCells(this._state.selection);\n        this._props.onSpace(cells);\n    }\n\n    protected _onPageUpDown(e: KeyboardEvent<HTMLDivElement>) {\n        e.preventDefault();\n\n        const { shiftKey, cmdKey, altKey } = this._getModifiers(e);\n        let { view } = this._state;\n        let direction: 'left' | 'right' | 'up' | 'down' = (\n            e.keyCode === 33\n                ? altKey\n                    ? 'left'\n                    : 'up'\n                : altKey\n                    ? 'right'\n                    : 'down'\n        );\n\n        let pageColumns = view.lastColumn - view.firstColumn;\n        let pageRows = view.lastRow - view.firstRow;\n\n\n        switch (e.keyCode) {\n            case 37: direction = 'left'; break;\n            case 38: direction = 'up'; break;\n            case 39: direction = 'right'; break;\n            case 40: direction = 'down'; break;\n        }\n\n        this._moveSelection(shiftKey, cmdKey, direction, altKey ? pageColumns : pageRows);\n    }\n\n    protected _onHomeEnd(e: KeyboardEvent<HTMLDivElement>) {\n        const { shiftKey, cmdKey, altKey } = this._getModifiers(e);\n\n        if (altKey) {\n            return;\n        }\n\n        e.preventDefault();\n\n        let direction: 'home' | 'end' = e.keyCode === 36 ? 'home' : 'end';\n        let { active, rows, columns, selection } = this._state;\n        let nextActive: IGridAddress = null;\n        let nextSelection: IGridSelection[] = null;\n\n        let nextScroll: IGridAddress = {\n            row: cmdKey ? direction === 'home' ? 0 : (rows - 1) : active.row,\n            column: direction === 'home' ? 0 : (columns - 1)\n        };\n\n        if (shiftKey) {\n            let { prev } = this._splitSelection(selection);\n\n            nextSelection = [\n                ...prev,\n                {\n                    row: cmdKey && direction === 'home' ? 0 : active.row,\n                    column: direction === 'home' ? 0 : active.column,\n                    height: cmdKey ? (direction === 'home' ? active.row : rows - active.row - 1) : 0,\n                    width: direction === 'home' ? active.column : columns - active.column - 1\n                }\n            ];\n        } else {\n            nextActive = nextScroll;\n            nextSelection = [{ ...nextActive, width: 0, height: 0 }];\n        }\n\n        this._props.onUpdateSelection({\n            active: nextActive,\n            selection: nextSelection\n        });\n\n        this._props.onScroll(nextScroll);\n    }\n\n    protected _onArrows(e: KeyboardEvent<HTMLDivElement>) {\n        e.preventDefault();\n\n        const { shiftKey, cmdKey } = this._getModifiers(e);\n        let direction: 'left' | 'up' | 'down' | 'right';\n\n        switch (e.keyCode) {\n            case 37: direction = 'left'; break;\n            case 38: direction = 'up'; break;\n            case 39: direction = 'right'; break;\n            case 40: direction = 'down'; break;\n        }\n\n        this._moveSelection(shiftKey, cmdKey, direction, 1);\n    }\n\n    protected _onCopy(withHeaders: boolean) {\n        const cells = this._getSelectedCells(this._state.selection);\n        this._props.onCopy(cells, withHeaders);\n    }\n\n    protected _onNullify() {\n        if (this._state.readOnly) {\n            return;\n        }\n\n        const cells = this._getSelectedCells(this._state.selection);\n        this._props.onNullify(cells);\n    }\n\n    protected _onRemove() {\n        if (this._state.readOnly) {\n            return;\n        }\n\n        let rowMap = new Set<number>();\n        let colMap = new Set<number>();\n\n        this._getSelectedCells(this._state.selection).forEach(({ column, row }) => {\n            rowMap.add(row);\n            colMap.add(column);\n        });\n\n        this._props.onRemove({\n            rows: Array.from(rowMap).sort(),\n            columns: Array.from(colMap).sort()\n        });\n    }\n\n    protected _onSelectAll(e: KeyboardEvent<HTMLDivElement>) {\n        e.preventDefault();\n\n        const { cmdKey } = this._getModifiers(e);\n\n        if (!cmdKey) {\n            return;\n        }\n\n        let { rows, columns } = this._state;\n\n        this._props.onUpdateSelection({\n            selection: [{\n                row: 0,\n                column: 0,\n                width: columns - 1,\n                height: rows - 1\n            }]\n        });\n    }\n\n    protected _onData(e: KeyboardEvent<HTMLDivElement>) {\n        const { cmdKey, altKey, shiftKey } = this._getModifiers(e);\n\n        switch (e.keyCode) {\n            case 45: // insert\n                if (!cmdKey) {\n                    break;\n                }\n\n                e.preventDefault();\n                this._onCopy(shiftKey || altKey);\n                break;\n\n            case 8: // backspace\n            case 46: // delete\n                e.preventDefault();\n                if (shiftKey && !cmdKey) {\n                    this._onCopy(false);\n                    this._onNullify();\n                } else if (!shiftKey && cmdKey) {\n                    this._onRemove();\n                } else if (!shiftKey && !cmdKey) {\n                    this._onNullify();\n                }\n                break;\n\n            case 67: // c\n                if (!cmdKey) {\n                    break;\n                }\n                e.preventDefault();\n                this._onCopy(shiftKey || altKey);\n                break;\n\n            case 86: // v\n                if (!cmdKey) {\n                    break;\n                }\n\n                // this._onPaste();\n                break;\n\n            case 88: // x\n                if (!cmdKey) {\n                    break;\n                }\n                e.preventDefault();\n                this._onCopy(false);\n                this._onNullify();\n                break;\n        }\n    }\n\n    protected _paste = (e: ClipboardEvent) => {\n        const { enabled, focused, readOnly, selection } = this._props.getState();\n\n        if (!enabled || !focused || readOnly) {\n            return;\n        }\n\n        this._props.onPaste({\n            clipboard: e.clipboardData,\n            isReadOnly: (a) => {\n                return this._props.onReadOnly(a, 'paste');\n            },\n            getAllSelectedCells: () => {\n                return this._getSelectedCells(selection);\n            },\n            getLastSelectedCells: () => {\n                let { last } = this._splitSelection(selection);\n                return this._getSelectedCells([last]);\n            }\n        });\n    }\n\n    public keydown(e: KeyboardEvent<HTMLDivElement>) {\n        const { enabled, editor, active, focused, rows, columns } = this._request();\n\n        if (!enabled || !rows || !columns) {\n            return;\n        }\n\n        if (editor) {\n            switch (e.keyCode) {\n                case 9: // tab\n                    this._props.onCloseEditor(true, () => {\n                        this._onTab(e, () => {\n                            this._props.onOpenEditor(this._request().active);\n                        });\n                    });\n                    break;\n\n                case 13: // enter\n                    this._props.onCloseEditor(true, () => {\n                        this._onEnter(e, () => {\n                            this._props.onOpenEditor(this._request().active);\n                        });\n                    });\n                    break;\n\n                case 27: // esc\n                    this._props.onCloseEditor(false);\n                    break;\n            }\n            return;\n        }\n\n        if (!focused) {\n            return;\n        }\n\n        if (this._isInput(e)) {\n            this._props.onOpenEditor(active);\n            return;\n        }\n\n        switch (e.keyCode) {\n            case 9: // tab\n                this._onTab(e);\n                break;\n\n            case 13: // enter\n                this._onEnter(e);\n                break;\n\n            case 32: // space\n                this._onSpace(e);\n                break;\n\n            case 33: // page up\n            case 34: // page down\n                this._onPageUpDown(e);\n                break;\n\n            case 35: // end\n            case 36: // home\n                this._onHomeEnd(e);\n                break;\n\n            case 37: // left\n            case 38: // up\n            case 39: // right\n            case 40: // down\n                this._onArrows(e);\n                break;\n\n            case 65: // a\n                this._onSelectAll(e);\n                break;\n\n            case 8: // backspace\n            case 45: // insert\n            case 46: // delete\n            case 67: // c\n            case 86: // v\n            case 88: // x\n                this._onData(e);\n                break;\n\n            case 113: // F2\n                this._props.onOpenEditor({ ...active });\n                break;\n        }\n    }\n\n    public dispose() {\n        document.body.removeEventListener('paste', this._paste);\n    }\n}\n\nexport default KeyboardController;\n"]}