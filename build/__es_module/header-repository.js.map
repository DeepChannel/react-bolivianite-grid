{"version":3,"sources":["header-repository.ts"],"names":[],"mappings":"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","file":"header-repository.js","sourcesContent":["import { IHeader, HeaderType, HeaderResizeBehavior, HeaderFilter, HeaderClampFunction } from './types';\r\nimport { IHeaderRepositoryCache } from './header-repository-cache';\r\n\r\nexport interface IHeaderRepositoryProps {\r\n    cache?: IHeaderRepositoryCache;\r\n    rows: IHeader[];\r\n    columns: IHeader[];\r\n    columnWidth: number;\r\n    rowHeight: number;\r\n    headersHeight: number;\r\n    headersWidth: number;\r\n    filter?: HeaderFilter;\r\n}\r\n\r\nexport interface IHeaderRepositoryState extends IHeaderRepositoryProps {\r\n    viewColumns: IHeader[];\r\n    viewRows: IHeader[];\r\n    offsetWidth: number;\r\n    offsetHeight: number;\r\n\r\n    /** header's type */\r\n    types: { [headerId: string]: HeaderType };\r\n\r\n    /** header's parent */\r\n    parents: { [headerId: string]: IHeader };\r\n\r\n    /** header's position */\r\n    positions: { [headerId: string]: number };\r\n\r\n    /** header's index */\r\n    indices: { [headerId: string]: number };\r\n\r\n    /** header's level */\r\n    levels: { [headerId: string]: number };\r\n\r\n    // CACHED:\r\n    /** maximum levels */\r\n    viewLeftLevels: number;\r\n    viewTopLevels: number;\r\n\r\n    /** level sizes */\r\n    leftLevels: { [level: number]: number };\r\n    topLevels: { [level: number]: number };\r\n\r\n    /** header manual resized flag */\r\n    headerManualResized: Set<string | number>;\r\n\r\n    /** level manual resized flag */\r\n    levelManualResized: Set<string | number>;\r\n}\r\n\r\nexport class HeaderRepository {\r\n    private _idCounter = 0;\r\n    private _state: IHeaderRepositoryState;\r\n    private _idMap: { [id: string]: IHeader; } = {};\r\n\r\n    constructor(props: IHeaderRepositoryProps) {\r\n        if (!props) {\r\n            return;\r\n        }\r\n\r\n        this._state = {\r\n            ...props,\r\n            offsetWidth: 0,\r\n            offsetHeight: 0,\r\n            viewColumns: null,\r\n            viewRows: null,\r\n            viewLeftLevels: 0,\r\n            viewTopLevels: 0,\r\n            leftLevels: {},\r\n            topLevels: {},\r\n            types: {},\r\n            indices: {},\r\n            positions: {},\r\n            levels: {},\r\n            parents: {},\r\n            headerManualResized: new Set<string>(),\r\n            levelManualResized: new Set<string>()\r\n        };\r\n\r\n        this._state.viewColumns = this._create(props.columns, [], HeaderType.Column, props.filter);\r\n        this._state.viewRows = this._create(props.rows, [], HeaderType.Row, props.filter);\r\n\r\n        this._calcPosition();\r\n        this._calcLevels();\r\n    }\r\n\r\n    get columnWidth() {\r\n        return this._state.columnWidth;\r\n    }\r\n\r\n    get rowHeight() {\r\n        return this._state.rowHeight;\r\n    }\r\n\r\n    get headersHeight() {\r\n        return this._state.headersHeight;\r\n    }\r\n\r\n    get headersWidth() {\r\n        return this._state.headersWidth;\r\n    }\r\n\r\n    /** Total width of row headers. */\r\n    get offsetWidth() {\r\n        return (\r\n            this._state.cache\r\n                ? this._state.cache.getOffset('left')\r\n                : this._state.offsetWidth\r\n        );\r\n    }\r\n\r\n    /** Total height of column headers. */\r\n    get offsetHeight() {\r\n        return (\r\n            this._state.cache\r\n                ? this._state.cache.getOffset('top')\r\n                : this._state.offsetHeight\r\n        );\r\n    }\r\n\r\n    get topLevels() {\r\n        return (\r\n            this._state.cache\r\n                ? this._state.cache.getLevels('top')\r\n                : this._state.viewTopLevels\r\n        );\r\n    }\r\n\r\n    get leftLevels() {\r\n        return (\r\n            this._state.cache\r\n                ? this._state.cache.getLevels('left')\r\n                : this._state.viewLeftLevels\r\n        );\r\n    }\r\n\r\n    get columns() {\r\n        return this._state.viewColumns;\r\n    }\r\n\r\n    get rows() {\r\n        return this._state.viewRows;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            source: {\r\n                rows: this._state.rows,\r\n                columns: this._state.columns,\r\n            },\r\n            view: {\r\n                rows: this.rows,\r\n                columns: this.columns,\r\n            },\r\n            settings: {\r\n                columnWidth: this.columnWidth,\r\n                rowHeight: this.rowHeight,\r\n                headersHeight: this.headersHeight,\r\n                headersWidth: this.headersWidth,\r\n                canvasHeight: this.offsetHeight,\r\n                canvasWidth: this.offsetWidth,\r\n                topLevels: this.topLevels,\r\n                leftLevels: this.leftLevels,\r\n                filter: !!this._state.filter\r\n            }\r\n        };\r\n    }\r\n\r\n    private _create(\r\n        list: IHeader[],\r\n        out: IHeader[],\r\n        type: HeaderType,\r\n        filter?: HeaderFilter,\r\n        assignParent?: IHeader\r\n    ) {\r\n        list.forEach((h) => {\r\n            h.$id = h.$id || ++this._idCounter;\r\n\r\n            this._state.positions[h.$id] = 0;\r\n\r\n            if (assignParent) {\r\n                this._state.parents[h.$id] = assignParent;\r\n            }\r\n\r\n            if (filter && !filter({ header: h, type })) {\r\n                return;\r\n            }\r\n\r\n            if (!h.$collapsed && h.$children && h.$children.length) {\r\n                this._create(h.$children, out, type, filter, h);\r\n                return;\r\n            }\r\n\r\n            out.push(h);\r\n        });\r\n\r\n        return out;\r\n    }\r\n\r\n    private _createClone() {\r\n        let c = new HeaderRepository(null);\r\n\r\n        c._state = {\r\n            ...this._state,\r\n            leftLevels: { ...this._state.leftLevels },\r\n            topLevels: { ...this._state.topLevels },\r\n            types: { ...this._state.types },\r\n            indices: { ...this._state.indices },\r\n            positions: { ...this._state.positions },\r\n            levels: { ...this._state.levels },\r\n            parents: { ...this._state.parents },\r\n            headerManualResized: new Set(this._state.headerManualResized),\r\n            levelManualResized: new Set(this._state.levelManualResized)\r\n        };\r\n\r\n        return c;\r\n    }\r\n\r\n    private _applyHeaderLevel(h: IHeader) {\r\n        let level = 0;\r\n        let seek = h;\r\n\r\n        while (this._state.parents[seek.$id]) {\r\n            level++;\r\n            seek = this._state.parents[seek.$id];\r\n        }\r\n\r\n        this._state.levels[h.$id] = level;\r\n\r\n        if (this._state.parents[h.$id]) {\r\n            this._applyHeaderLevel(this._state.parents[h.$id]);\r\n        }\r\n\r\n        return level;\r\n    }\r\n\r\n    private _applyParentPosition(list: IHeader[], type: HeaderType) {\r\n        let lock = new Set<string | number>();\r\n        let parents: IHeader[] = [];\r\n\r\n        list.forEach((h) => {\r\n            this._idMap[h.$id] = h;\r\n            this._state.types[h.$id] = type;\r\n\r\n            let first = h.$children[0];\r\n            let last = h.$children[h.$children.length - 1];\r\n\r\n            this._state.positions[h.$id] = this._state.positions[first.$id];\r\n            h.$size = this._state.positions[last.$id] + this.getSize(last) - this._state.positions[first.$id];\r\n\r\n            if (this._state.cache) {\r\n                this._state.cache.setHeaderSize(h.$size, h, type);\r\n            }\r\n\r\n            let parent = this._state.parents[h.$id];\r\n\r\n            if (parent && !lock.has(parent.$id)) {\r\n                lock.add(parent.$id);\r\n                parents.push(parent);\r\n            }\r\n        });\r\n\r\n        if (parents.length) {\r\n            this._applyParentPosition(parents, type);\r\n        }\r\n    }\r\n\r\n    private _proceedHeaders(list: IHeader[], from: number, size: number, type: HeaderType) {\r\n        let len = list.length;\r\n        if (!len) {\r\n            return 0;\r\n        }\r\n\r\n        let cursor = this._state.positions[list[from].$id];\r\n\r\n        let levels = 0;\r\n        let lock = new Set<string | number>();\r\n        let parents: IHeader[] = [];\r\n\r\n        for (let i = from; i < len; i++) {\r\n            let h = list[i];\r\n\r\n            this._state.indices[h.$id] = (!h.$collapsed && h.$children && h.$children[0]) ? -1 : i;\r\n            this._state.positions[h.$id] = cursor;\r\n            this._state.types[h.$id] = type;\r\n            this._idMap[h.$id] = h;\r\n\r\n            for (let p of ['$size', '$sizeCollapsed']) {\r\n                if (!h[p]) {\r\n                    if (this._state.cache) {\r\n                        let _h = { ...h, $collapsed: p === '$sizeCollapsed' };\r\n                        let cachedSize = this._state.cache.getHeaderSize(_h, type);\r\n                        h[p] = cachedSize || size;\r\n\r\n                        if (!cachedSize) {\r\n                            this._state.cache.setHeaderSize(h[p], _h, type);\r\n                        }\r\n                    } else {\r\n                        h[p] = size;\r\n                    }\r\n                }\r\n            }\r\n\r\n            cursor += this.getSize(h);\r\n\r\n            let l = this._applyHeaderLevel(h);\r\n\r\n            if (l > levels) {\r\n                levels = l;\r\n            }\r\n\r\n            let parent = this._state.parents[h.$id];\r\n            if (parent && !lock.has(parent.$id)) {\r\n                lock.add(parent.$id);\r\n                parents.push(parent);\r\n            }\r\n        }\r\n\r\n        if (parents.length) {\r\n            this._applyParentPosition(parents, type);\r\n        }\r\n\r\n        return levels + 1;\r\n    }\r\n\r\n    private _calcLevels() {\r\n        let w = 0, h = 0;\r\n\r\n        for (let i = 0; i < this.leftLevels; i++) {\r\n            w += this.getLeftLevelWidth(i);\r\n        }\r\n\r\n        for (let i = 0; i < this.topLevels; i++) {\r\n            h += this.getTopLevelHeight(i);\r\n        }\r\n\r\n        this._state.offsetWidth = w || this._state.headersWidth;\r\n        this._state.offsetHeight = h || this._state.headersHeight;\r\n\r\n        if (this._state.cache) {\r\n            this._state.cache.setOffset(this._state.offsetWidth, 'left');\r\n            this._state.cache.setOffset(this._state.offsetHeight, 'top');\r\n        }\r\n    }\r\n\r\n    private _calcPosition(from = 0) {\r\n        this._state.viewTopLevels = this._proceedHeaders(this._state.viewColumns, from, this._state.columnWidth, HeaderType.Column);\r\n        this._state.viewLeftLevels = this._proceedHeaders(this._state.viewRows, from, this._state.rowHeight, HeaderType.Row);\r\n\r\n        if (this._state.cache) {\r\n            this._state.cache.setLevels(this._state.viewLeftLevels, 'left');\r\n            this._state.cache.setLevels(this._state.viewTopLevels, 'top');\r\n        }\r\n    }\r\n\r\n    private _getLevelPosition(type: 'left' | 'top', level: number) {\r\n        if (level >= (type === 'left' ? this.leftLevels : this.topLevels)) {\r\n            return 0;\r\n        }\r\n\r\n        let p = 0;\r\n        for (let i = 0; i < level; i++) {\r\n            p += (type === 'left' ? this.getLeftLevelWidth(i) : this.getTopLevelHeight(i));\r\n        }\r\n\r\n        return p;\r\n    }\r\n\r\n    private _getLeaves(h: IHeader, out: IHeader[] = []) {\r\n        if (h.$collapsed || !h.$children || !h.$children.length) {\r\n            out.push(h);\r\n            return out;\r\n        }\r\n\r\n        h.$children.forEach(c => this._getLeaves(c, out));\r\n        return out;\r\n    }\r\n\r\n    private _getAllNodesByChildren(headers: IHeader[], lock = new Set<string | number>(), out: IHeader[] = []) {\r\n        headers.forEach((h) => {\r\n            if (!h) {\r\n                return;\r\n            }\r\n\r\n            if (!lock.has(h.$id)) {\r\n                out.push(h);\r\n                lock.add(h.$id);\r\n            }\r\n\r\n            if (h.$children && h.$children.length) {\r\n                this._getAllNodesByChildren(h.$children, lock, out);\r\n            }\r\n        });\r\n\r\n        return out;\r\n    }\r\n\r\n    private _getAllNodesByParents(headers: IHeader[], lock = new Set<string | number>(), out: IHeader[] = []) {\r\n        const seek = (h: IHeader) => {\r\n            if (!h) {\r\n                return;\r\n\r\n            }\r\n\r\n            if (!lock.has(h.$id)) {\r\n                out.push(h);\r\n                lock.add(h.$id);\r\n            }\r\n\r\n            seek(this.getParent(h));\r\n        };\r\n\r\n        headers.forEach((h) => {\r\n            seek(h);\r\n        });\r\n\r\n        return out;\r\n    }\r\n\r\n    private _getResizeList(h: IHeader, size: number, clamp: HeaderClampFunction) {\r\n        if (h.$collapsed || !h.$children || !h.$children.length) {\r\n            size = clamp({\r\n                header: h,\r\n                type: this._state.types[h.$id],\r\n                size\r\n            });\r\n        }\r\n\r\n        let prevSize = this.getSize(h);\r\n\r\n        if (h.$collapsed || !h.$children || !h.$children.length) {\r\n            return [{\r\n                header: h,\r\n                size\r\n            }];\r\n        }\r\n\r\n        let leaves = this.getHeaderLeaves(h);\r\n\r\n        let d = 0;\r\n\r\n        if (clamp) {\r\n            leaves.forEach((c) => {\r\n                let n = Math.floor(this.getSize(c) * size / prevSize);\r\n                let m = clamp({\r\n                    header: h,\r\n                    type: this._state.types[h.$id],\r\n                    size: n - d\r\n                });\r\n\r\n                if (n < m) {\r\n                    d += m - n;\r\n                }\r\n            });\r\n        }\r\n\r\n        return leaves.map((c) => {\r\n            return {\r\n                header: c,\r\n                size: clamp({\r\n                    header: c,\r\n                    type: this._state.types[c.id],\r\n                    size: Math.floor(this.getSize(c) * size / prevSize) - d\r\n                })\r\n            };\r\n        });\r\n    }\r\n\r\n    private _getHeaderAddress(h: IHeader, root: IHeader[]) {\r\n        let ix: number[] = [];\r\n        let seek = h;\r\n\r\n        while (seek) {\r\n            let p = this.getParent(seek);\r\n            let list = p ? p.$children : root;\r\n            let index = list.findIndex(c => c.$id === seek.$id);\r\n            ix.push(index);\r\n            seek = p;\r\n        }\r\n\r\n        ix.push(-1); // -1 means root\r\n\r\n        return ix.reverse();\r\n    }\r\n\r\n    private _mapBranch(address: number[], list: IHeader[], map: (h: IHeader) => IHeader): IHeader[] {\r\n        if (!list) {\r\n            return list;\r\n        }\r\n\r\n        let len = address.length;\r\n\r\n        let output = list.map((h) => {\r\n            if (!len) {\r\n                return map(h);\r\n            }\r\n\r\n            return {\r\n                ...h,\r\n                $children: this._mapBranch(address.slice(1), h.$children, map)\r\n            };\r\n        });\r\n\r\n        return output;\r\n    }\r\n\r\n    private _recalcHeaders() {\r\n        this._state.viewColumns = null;\r\n        this._state.viewRows = null;\r\n        this._state.types = {};\r\n        this._state.indices = {};\r\n        this._state.positions = {};\r\n        this._state.levels = {};\r\n        this._state.parents = {};\r\n        this._state.viewColumns = this._create(this._state.columns, [], HeaderType.Column, this._state.filter);\r\n        this._state.viewRows = this._create(this._state.rows, [], HeaderType.Row, this._state.filter);\r\n        this._calcPosition();\r\n        this._calcLevels();\r\n\r\n        return this;\r\n    }\r\n\r\n    private _updateHeaders(\r\n        branchMap: {\r\n            [branchName: string]: {\r\n                [$id: string]: IHeader;\r\n            };\r\n        },\r\n        sourceList: IHeader[]\r\n    ) {\r\n        let branchList = Object.keys(branchMap);\r\n\r\n        if (!branchList.length) {\r\n            return sourceList;\r\n        }\r\n\r\n        branchList.forEach((branch) => {\r\n            let address = branch.split('/').filter(v => !!v).map(Number);\r\n            let updateMap = branchMap[branch];\r\n\r\n            // removing first -1 element, that represents root\r\n            address.shift();\r\n\r\n            sourceList = this._mapBranch(address, sourceList, (h) => {\r\n                let update = updateMap[h.$id];\r\n\r\n                if (!update) {\r\n                    return h;\r\n                }\r\n\r\n                let next = { ...h };\r\n\r\n                Object.keys(update).forEach((key) => {\r\n                    if (key === '$id') {\r\n                        return;\r\n                    }\r\n\r\n                    next[key] = update[key];\r\n                });\r\n\r\n                return next;\r\n            });\r\n        });\r\n\r\n        return sourceList;\r\n    }\r\n\r\n    public getHeader(id: number | string) {\r\n        return this._idMap[id];\r\n    }\r\n\r\n    public getHeaderType(h: IHeader) {\r\n        return this._state.types[h.$id];\r\n    }\r\n\r\n    public getViewIndex(h: IHeader) {\r\n        return this._state.indices[h.$id];\r\n    }\r\n\r\n    public getPosition(h: IHeader) {\r\n        return this._state.positions[h.$id];\r\n    }\r\n\r\n    public getManualResized(h: IHeader) {\r\n        return (\r\n            this._state.cache\r\n                ? this._state.cache.getHeaderLock(h, this._state.types[h.$id])\r\n                : this._state.headerManualResized.has(h.$id)\r\n        );\r\n    }\r\n\r\n    public getManualResizedLevel(type: HeaderType, level: number) {\r\n        return (\r\n            this._state.cache\r\n                ? this._state.cache.getLevelLock(level, type)\r\n                : this._state.levelManualResized.has(`${type}:${level}`)\r\n        );\r\n    }\r\n\r\n    /** Header level in logic tree. Used for positioning. */\r\n    public getLevel(h: IHeader) {\r\n        return this._state.levels[h.$id];\r\n    }\r\n\r\n    /** Header level in canvas. Used for measuring. */\r\n    public getPositionLevel(h: IHeader) {\r\n        const level = this.getLevel(h);\r\n        const maxLevel = (this._state.types[h.$id] === HeaderType.Column ? this.topLevels : this.leftLevels) - 1;\r\n        const hasChildren = h.$children && h.$children.length;\r\n        return level < maxLevel && (h.$collapsed || !hasChildren) ? maxLevel : level;\r\n    }\r\n\r\n    public getParent(h: IHeader) {\r\n        return this._state.parents[h.$id];\r\n    }\r\n\r\n    public getTopLevelPosition(level: number) {\r\n        return this._getLevelPosition('top', level);\r\n    }\r\n\r\n    public getLeftLevelPosition(level: number) {\r\n        return this._getLevelPosition('left', level);\r\n    }\r\n\r\n    public getSize(h: IHeader) {\r\n        if (!h) {\r\n            return 0;\r\n        }\r\n\r\n        if (this._state.cache) {\r\n            return this._state.cache.getHeaderSize(h, this._state.types[h.$id]);\r\n        }\r\n\r\n        return h.$collapsed ? h.$sizeCollapsed : h.$size;\r\n    }\r\n\r\n    public getLeftLevelWidth(level: number, isCollapsed?: boolean) {\r\n        if (isCollapsed) {\r\n            return this.offsetWidth - this.getLeftLevelPosition(level);\r\n        }\r\n\r\n        let v = (\r\n            this._state.cache\r\n                ? this._state.cache.getLevelSize(level, 'left')\r\n                : this._state.leftLevels[level]\r\n        );\r\n\r\n        return v || this._state.headersWidth;\r\n    }\r\n\r\n    public getTopLevelHeight(level: number, isCollapsed?: boolean) {\r\n        if (isCollapsed) {\r\n            return this.offsetHeight - this.getTopLevelPosition(level);\r\n        }\r\n\r\n        let v = (\r\n            this._state.cache\r\n                ? this._state.cache.getLevelSize(level, 'top')\r\n                : this._state.topLevels[level]\r\n        );\r\n\r\n        return v || this._state.headersHeight;\r\n    }\r\n\r\n    public getHeaderLeaves(h: IHeader) {\r\n        return this._getLeaves(h);\r\n    }\r\n\r\n    /** top-down search */\r\n    public getNodesTopDown(h: IHeader[]) {\r\n        return this._getAllNodesByChildren(h);\r\n    }\r\n\r\n    /** bottom-up search */\r\n    public getNodesBottomUp(h: IHeader[]) {\r\n        return this._getAllNodesByParents(h);\r\n    }\r\n\r\n    public getSource() {\r\n        return {\r\n            cache: this._state.cache,\r\n            columns: this._state.columns,\r\n            rows: this._state.rows,\r\n            columnWidth: this._state.columnWidth,\r\n            rowHeight: this._state.rowHeight,\r\n            headersHeight: this._state.headersHeight,\r\n            headersWidth: this._state.headersWidth,\r\n            filter: this._state.filter\r\n        } as IHeaderRepositoryProps;\r\n    }\r\n\r\n    /** Create clone of repository with new applied filter. */\r\n    public updateFilter(filter: HeaderFilter) {\r\n        if (this._state.filter === filter) {\r\n            return this;\r\n        }\r\n\r\n        let next = this._createClone();\r\n        next._state.filter = filter;\r\n        return next._recalcHeaders();\r\n    }\r\n\r\n    /** Update provided headers. Returns new perository. */\r\n    public updateHeaders(updates: { header: IHeader, update: IHeader }[]) {\r\n        let mapColumns: {\r\n            [branchName: string]: {\r\n                [$id: string]: IHeader;\r\n            };\r\n        } = {};\r\n\r\n        let mapRows: typeof mapColumns = {};\r\n\r\n        updates.forEach(({ header, update }) => {\r\n            let headerType = this._state.types[header.$id];\r\n            let address = this._getHeaderAddress(header, headerType === HeaderType.Row ? this._state.rows : this._state.columns);\r\n            let map = headerType === HeaderType.Column ? mapColumns : mapRows;\r\n            let branchName = address.slice(0, address.length - 1).join('/');\r\n\r\n            if (!map[branchName]) {\r\n                map[branchName] = {};\r\n            }\r\n\r\n            map[branchName][header.$id] = update;\r\n        });\r\n\r\n        let next = this._createClone();\r\n\r\n        next._state.columns = this._updateHeaders(mapColumns, next._state.columns);\r\n        next._state.rows = this._updateHeaders(mapRows, next._state.rows);\r\n\r\n        next = next._recalcHeaders();\r\n\r\n        return next;\r\n    }\r\n\r\n    /**\r\n     * Resize all headers.\r\n     * @param list Array of headers.\r\n     * @param clamp Size clamp function.\r\n     * @param behavior Defines flag when header was resized by autosize or manually.\r\n     * Header will not be autosized when it was manually resized. Default `\"manual\"`.\r\n     */\r\n    public resizeHeaders({ headers, clamp, behavior }: {\r\n        headers: { header: IHeader, size: number }[];\r\n        clamp?: HeaderClampFunction;\r\n        behavior?: HeaderResizeBehavior;\r\n    }) {\r\n        if (!headers || !headers.length) {\r\n            return this;\r\n        }\r\n\r\n        clamp = clamp || (({ size }) => size);\r\n        behavior = behavior || 'manual';\r\n\r\n        let updates: { header: IHeader, update: IHeader }[] = [];\r\n        let leaves: IHeader[] = [];\r\n\r\n        headers.forEach((u) => {\r\n            let resizeList = this._getResizeList(u.header, u.size, clamp);\r\n\r\n            resizeList.forEach(({ header, size }) => {\r\n                leaves.push(header);\r\n\r\n                updates.push({\r\n                    header,\r\n                    update: (\r\n                        header.$collapsed\r\n                            ? { $sizeCollapsed: size }\r\n                            : { $size: size }\r\n                    )\r\n                });\r\n\r\n                if (this._state.cache) {\r\n                    this._state.cache.setHeaderSize(size, header, this._state.types[header.$id]);\r\n                }\r\n            });\r\n        });\r\n\r\n        let c = this.updateHeaders(updates);\r\n\r\n        switch (behavior) {\r\n            case 'manual':\r\n            case 'reset':\r\n                let isManual = behavior === 'manual';\r\n                leaves.forEach((header) => {\r\n                    if (isManual) {\r\n                        c._state.headerManualResized.add(header.$id);\r\n\r\n                        if (c._state.cache) {\r\n                            c._state.cache.setHeaderLock(true, header, this._state.types[header.$id]);\r\n                        }\r\n                    } else {\r\n                        c._state.headerManualResized.delete(header.$id);\r\n\r\n                        if (c._state.cache) {\r\n                            c._state.cache.setHeaderLock(false, header, this._state.types[header.$id]);\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n\r\n        return c;\r\n    }\r\n\r\n    /** Resize header levels, returns new repository. */\r\n    public resizeLevels({ levels, behavior }: {\r\n        levels: {\r\n            type: HeaderType;\r\n            level: number;\r\n            size: number;\r\n            min?: number;\r\n            max?: number;\r\n        }[],\r\n        behavior?: HeaderResizeBehavior\r\n    }) {\r\n        behavior = behavior || 'manual';\r\n\r\n        let next = this._createClone();\r\n\r\n        for (let { level, type, size, max, min } of levels) {\r\n            min = min == null ? 5 : min;\r\n            max = max == null ? Infinity : max;\r\n\r\n            let levelSize = Math.min(Math.max(min, size), max);\r\n\r\n            if (type === HeaderType.Column) {\r\n                if (next._state.cache) {\r\n                    next._state.cache.setLevelSize(levelSize, level, 'top');\r\n                }\r\n\r\n                next._state.topLevels[level] = levelSize;\r\n            } else {\r\n                if (next._state.cache) {\r\n                    next._state.cache.setLevelSize(levelSize, level, 'left');\r\n                }\r\n\r\n                next._state.leftLevels[level] = levelSize;\r\n            }\r\n\r\n            switch (behavior) {\r\n                case 'manual':\r\n                case 'reset':\r\n                    let isManual = behavior === 'manual';\r\n                    let key = `${type}:${level}`;\r\n                    if (isManual) {\r\n                        next._state.levelManualResized.add(key);\r\n\r\n                        if (next._state.cache) {\r\n                            next._state.cache.setLevelLock(true, level, type);\r\n                        }\r\n                    } else {\r\n                        next._state.levelManualResized.delete(key);\r\n\r\n                        if (next._state.cache) {\r\n                            next._state.cache.setLevelLock(false, level, type);\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n\r\n        return next._recalcHeaders();\r\n    }\r\n\r\n    /** Update repository with new state properties. Returns new repository. */\r\n    public update(props: IHeaderRepositoryProps) {\r\n        let next = this._createClone();\r\n\r\n        next._state = {\r\n            ...next._state,\r\n            ...props\r\n        };\r\n\r\n        return next._recalcHeaders();\r\n    }\r\n}\r\n\r\nexport default HeaderRepository;\r\n"]}